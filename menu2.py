# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'menu.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import re
import sys
from PyQt5.uic import loadUi
from PyQt5.QtCore import Qt
from PyQt5 import uic, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QDialog, QLineEdit, QPushButton, QLabel, QGridLayout, QVBoxLayout, QHBoxLayout, QMessageBox, QWidget
import mysql.connector
from inscrip import Ui_Dialog1 as inscrip
from PyQt5 import QtCore, QtGui, QtWidgets
import mysql.connector




class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(420, 600)
        font = QtGui.QFont()
        font.setPointSize(8)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(200, 60, 151, 20))
        font = QtGui.QFont()
        font.setFamily("Myanmar Text")
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(70, 50, 71, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe Print")
        font.setPointSize(15)
        self.label.setFont(font)
        self.label.setOpenExternalLinks(False)
        self.label.setObjectName("label")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(200, 100, 151, 20))
        self.lineEdit_2.setText("")
        self.lineEdit_2.setReadOnly(False)
        self.lineEdit_2.setEchoMode(QLineEdit.Password)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(70, 100, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe Print")
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setOpenExternalLinks(False)
        self.label_2.setObjectName("label_2")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(240, 170, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(100, 170, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 420, 19))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Email"))
        self.label_2.setText(_translate("MainWindow", "Password"))
        self.pushButton_2.setText(_translate("MainWindow", "Inscription"))
        self.pushButton.setText(_translate("MainWindow", "Connexion"))
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
class MyApp(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(MyApp, self).__init__(parent)
        code_widget = inscrip()
        self.setCentralWidget(code_widget)
        
        # Ouvrir le fichier contenant le code
        with open("inscrip.py", "r") as f:
            code = f.read()
        
        # Afficher le code dans le widget
        code_widget.setPlainText(code)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.ui.retranslateUi(self)
        self.inscrip = QtWidgets.QDialog()
        self.uiform = inscrip()
        self.uiform.setupUi(self.inscrip)
        self.ui.pushButton.clicked.connect(self.check_email)
        self.ui.pushButton.clicked.connect(self.check_password)
        self.ui.pushButton_2.clicked.connect(self.open_inscrip_dialog)
        self.ui.pushButton_2.clicked.connect(self.open_emprunt_dialog)
        
        self.email_edit = self.ui.lineEdit
        self.email_edit.setPlaceholderText("Entrez une adresse email Gmail")
        self.password_edit = self.ui.lineEdit_2
        self.password_edit.setPlaceholderText("Entrez un mot de passe")
        # Creation de liste
        '''
        self.liste = QtWidgets.QDialog()
        self.uiliste = liste()
        self.uiliste.setupUi(self.liste)
        '''
        # Creation de formulaire
    def check_email(self):
        email = self.ui.lineEdit.text()
        # Vérifier si l'adresse email se termine par "@gmail.com"
        if re.match(r"[^@]+@gmail\.com", email):
            self.ui.lineEdit.setStyleSheet("")
            
            # Vérifier si l'adresse email existe dans la base de données
            cursor = self.cnx.cursor()
            cursor.execute("SELECT * FROM client WHERE email=%s", (email,))
            result = cursor.fetchone()
            if result is not None:
                # L'email existe dans la base de données
                print("L'email existe dans la base de données.")
            else:
                # L'email n'existe pas dans la base de données
                print("L'email n'existe pas dans la base de données.")
                msg = QMessageBox()
                msg.setWindowTitle("Adresse email invalide")
                msg.setText("Adresse email invalide")
                msg.setIcon(QMessageBox.Warning)
                msg.exec_()
            
            cursor.close()
        else:
            self.ui.lineEdit.setStyleSheet("QLineEdit { background-color: red; }")    
    def check_password(self):
    # Connexion à la base de données
        cnx = mysql.connector.connect(user="root", password="", host="localhost", database="location_voiture")
        cursor = cnx.cursor()
        password = self.ui.lineEdit_2.text()
        # Récupération de l'email et du mot de passe entrés par l'utilisateur
        email = self.email_edit.text()

        # Recherche de l'utilisateur dans la base de données
        cursor.execute("SELECT * FROM client WHERE email=%s", (email,))
        result = cursor.fetchone()

        if result is not None:
            # L'utilisateur a été trouvé, vérification du mot de passe
            stored_password = result[2] # le mot de passe est stocké dans la colonne 2 de la table 'utilisateurs'
            if password == stored_password:
                print("Mot de passe correct.")
                self.liste.show()
            else:
                msg = QMessageBox()
                msg.setWindowTitle("Mot de passe incorrect")
                msg.setText("Mot de passe incorrect.")
                msg.setIcon(QMessageBox.Warning)
                msg.exec_()
                print("Mot de passe incorrect.")
        else:
            # L'utilisateur n'a pas été trouvé dans la base de données
            print("Utilisateur non trouvé.")

        # Fermeture de la connexion à la base de données
        cnx.close()
        
    def open_emprunt_dialog(self):
        emprunt_dialog = QtWidgets.QDialog(self)
        emprunt_ui = inscrip()
        emprunt_ui.setupUi(emprunt_dialog)
        emprunt_dialog.exec_()

    def open_inscrip_dialog(self):
        inscrip_dialog = QtWidgets.QDialog(self)
        inscrip_ui = inscrip()
        inscrip_ui.setupUi(inscrip_dialog)
        inscrip_dialog.exec_()
    def affiche_liste(self):
        if not re.match(r"[^@]+@gmail\.com", self.email_edit.text()):
            msg = QMessageBox()
            msg.setWindowTitle("Adresse email invalide")
            msg.setText("Veuillez entrer une adresse email se terminant par '@gmail.com'.")
            msg.setIcon(QMessageBox.Warning)
            msg.exec_()
            return
        self.liste.show()
    def setupUi(self):
        super().setupUi()
        '''
if __name__ == "__main__":
    app = QtWidgets.QApplication([])
    window = QtWidgets.QMainWindow()
    inscript = QtWidgets.QDialog()
    ui = MyApp()
    ui.show()
    sys.exit(app.exec_())
'''
if __name__ == '__main__':
    import sys
    app = QtWidgets.QApplication(sys.argv)
    main = MyApp()
    main.show()
    sys.exit(app.exec_())

    